# AUTOGENERATED! DO NOT EDIT! File to edit: 00_mongo_config.ipynb (unless otherwise specified).

__all__ = ['read_config', 'recursive_get', 'mongo_connect', 'read_mongo', 'send_df_to_mongo']

# Cell
import json
import os
import datetime
import pandas as pd
from pymongo import MongoClient
from dfply import *
from typing import List, Optional, Dict


# Cell
def read_config(json_path: str = "config.json") -> Dict:
    """ Read json config file

    Parameters
    ----------
    json_path: str, optional
        Path to the project json config file. Default is to use the one found at root directory

    Returns
    -------
    dict
        with the data contained in the config file.
    """
    with open(json_path) as json_file:
        config = json.load(json_file)

    return config

def recursive_get(d: Dict, *args, default=None) -> Dict:
    """Recursive implementation of dictionary value extraction

    Parameters
    ----------
    d: dict
        dictionary
    *args: dict
        path to the field required in `d`
    default: dict
        value to be returned if nothing is found. Default to `None


    Returns
    -------
    dict
        value found at the given path provided in `*args`

    """
    if d is None:
        return default

    if not args:
        return d
    key, *args = args
    return recursive_get(d.get(key, default), *args, default=default)

# Cell

def mongo_connect(config: dict, host_name: str = "playground") -> MongoClient:
    """
    Establish connection to the project's mongoDB

    Parameters
    ----------
    config : dict
        Project config dictionary
    host_name : str, optional
        Host name (should be defined in config)

    Returns
    -------
    MongoClient
        MongoClient to the project mongod instance
    """

    return MongoClient(recursive_get(config, "mongo", "host", host_name))

# Cell
def read_mongo(mongo_client: MongoClient, db: str, col: str,
               query: Dict = {}, fields: Dict = {}) -> pd.DataFrame:
    """
    Read documents from mongo as `pandas.DataFrame`

    Parameters
    ----------
    mongo_client: MongoClient
        mongo connection client
    db, col: str
        name of the key in the config file pointing to the database, collection name
    query, fields: Dict
        specify the query and fields by passing a dictionary

    Returns
    -------
    pd.DataFrame
        mongo documents converted to a `DataFrame`
    """
    if not fields: fields = None
    cursor = mongo_client[db][col].find(query, fields)
    return pd.json_normalize(list(cursor))

# Cell
def send_df_to_mongo(df: pd.DataFrame, mongo_client: MongoClient,
                     db: str, col: str) -> bool:
    """
    Send `pandas.DataFrame` to mongo

    Parameters
    ----------
    df: pd.DataFrame
        the `DataFrame` to send to mongo
    mongo_client: MongoClient
        mongo connection client
    db, col: str
        name of the key in the config file pointing to the database, collection name

    Returns
    -------
    bool
        insertion status: `True` (success) or `False` (failure)
    """
    status = True
    try:
        mongo_client[db][col].insert_many(df.to_dict("records"))
    except:
        status = False

    return status